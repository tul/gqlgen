// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package out

import (
	"fmt"
	"io"
	"strconv"
)

type MissingInterface interface {
	IsMissingInterface()
}

type MissingUnion interface {
	IsMissingUnion()
}

type ExistingType struct {
	Name     *string           `json:"name"`
	Enum     *ExistingEnum     `json:"enum"`
	Int      ExistingInterface `json:"int"`
	Existing **MissingType     `json:"existing"`
}

func (ExistingType) IsMissingUnion()      {}
func (ExistingType) IsMissingInterface()  {}
func (ExistingType) IsExistingInterface() {}
func (ExistingType) IsExistingUnion()     {}

type MissingInput struct {
	Name *string      `json:"name"`
	Enum *MissingEnum `json:"enum"`
}

type MissingType struct {
	Name     *string          `json:"name"`
	Enum     *MissingEnum     `json:"enum"`
	Int      MissingInterface `json:"int"`
	Existing **ExistingType   `json:"existing"`
}

func (MissingType) IsMissingInterface()  {}
func (MissingType) IsExistingInterface() {}
func (MissingType) IsMissingUnion()      {}
func (MissingType) IsExistingUnion()     {}

type MissingEnum string

const (
	MissingEnumHello   MissingEnum = "Hello"
	MissingEnumGoodbye MissingEnum = "Goodbye"
)

var AllMissingEnum = []MissingEnum{
	MissingEnumHello,
	MissingEnumGoodbye,
}

func (e MissingEnum) IsValid() bool {
	switch e {
	case MissingEnumHello, MissingEnumGoodbye:
		return true
	}
	return false
}

func (e MissingEnum) String() string {
	return string(e)
}

func (e *MissingEnum) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = MissingEnum(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid MissingEnum", str)
	}
	return nil
}

func (e MissingEnum) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
